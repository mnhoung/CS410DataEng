# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15gMXqSlDzeGkV7tk4SzAASxGlTHYScJ0
"""

import pandas as pd
from datetime import datetime
import matplotlib.pyplot as plt

url = 'https://drive.google.com/file/d/1Fkg7-X5gKsq2fIRVUcsTeIrDhqlwf1SD/edit'
url = 'https://drive.google.com/uc?id=' + url.split('/')[-2]
df = pd.read_csv(url)
# df['name'].head(10)
df.head(10)

# every record has a non-null name field
null_name_count = df['name'].isnull().sum() # sum up the values with null
print(f"Number of records with null name: {null_name_count}")

# every employee was hired no earlier than 2015
# print(df['hire_date'].describe())
df['hire_date'] = pd.to_datetime(df['hire_date'])  # convert to compare
earlier_hire_count = (df['hire_date'] < pd.Timestamp('2015-01-01')).sum()
print(f"Number of records with hire dates earlier than 2015: {earlier_hire_count}")

# each employee was born before they were hired
born_before_hire_count = (df['birth_date'] > df['hire_date']).sum()
print(f"Number of records where birth date is after hire date: {born_before_hire_count}")

# each employee has a manager who is a known employee
invalid_manager_count = (~df['reports_to'].isin(df['eid'])).sum() # any reports_to that does NOT exist in eid
print("Number of employees with unknown managers:", invalid_manager_count)

# each city has more than one employee
city_employee_counts = df['city'].value_counts()  # count number of occurances for each city (index: city, value: count)
cities_with_one_employee = city_employee_counts[city_employee_counts == 1].count()  # filters them with boolean value
print("Number of cities with only one employee:", cities_with_one_employee)

# the salaries are normally distributed
# Is the data set valid with respect to this assertion? For this show a screenshot of a histogram of salaries and state whether the histogram appears to resemble a normal distribution
salaries = df['salary'].to_numpy()
counts, bins, patches = plt.hist(salaries, bins=10, edgecolor='k')
# print(df['salary'].min())
# print(df['salary'].max())
plt.xlabel('Salary')
plt.ylabel('Frequency')
plt.title('Salary Distribution')
plt.show()