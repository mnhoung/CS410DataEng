# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UsStVDo7IjAcMhtcxVBo72hINq2PSwql
"""

import pandas as pd

cases_url = 'https://drive.google.com/file/d/1rKcpaXsnn4olkemLyAKgYTzb4E6cMWuk/edit'
death_url = 'https://drive.google.com/file/d/14CmnVuy2soIDnMFj-clkry2sDzNkCHsC/edit'
census_url = 'https://drive.google.com/file/d/14J-qtYyOSGQ7vvwETlKINFfczcKbKuF2/edit'
cases_url = 'https://drive.google.com/uc?id=' + cases_url.split('/')[-2]
death_url = 'https://drive.google.com/uc?id=' + death_url.split('/')[-2]
census_url = 'https://drive.google.com/uc?id=' + census_url.split('/')[-2]
cases_df = pd.read_csv(cases_url)
death_df = pd.read_csv(death_url)
census_df = pd.read_csv(census_url)

cases_df.head()

# Trim cases_df and deaths_df to only the needed columns: County Name, State and 2023-07-23.
cases_df = cases_df[['County Name', 'State', '2023-07-23']]
death_df = death_df[['County Name', 'State', '2023-07-23']]
# Trim census_df so that only these columns remain: County, State, TotalPop, IncomePerCap, Poverty, Unemployment
census_df = census_df[['County', 'State', 'TotalPop', 'IncomePerCap', 'Poverty', 'Unemployment']]
# Show the list of column headers for cases_df, deaths_df and census_df
print(f'Cases: {cases_df.columns}')
print(f'Deaths: {death_df.columns}')
print(f'Census: {census_df.columns}')

# each county name listed in cases_df and deaths_df contains an extra space character at the end. This extra space complicates integrating the data with the county names listed in the census data.
# Remove this trailing space in every county name.
cases_df['County Name'] = cases_df['County Name'].str.rstrip()
death_df['County Name'] = death_df['County Name'].str.rstrip()

# Test by searching for County Name == “Washington County” (without the trailing space) in both DataFrames.
# print(f'Cases: {cases_df[cases_df["County Name"] == "Washington County"]}')
# print(f'Deaths: {death_df[death_df["County Name"] == "Washington County"]}')
# How many counties are named “Washington County”?
print(f'Cases: {len(cases_df[cases_df["County Name"] == "Washington County"])}”.')
print(f'Deaths: {len(death_df[death_df["County Name"] == "Washington County"])}”.')

# Another issue with cases_df and deaths_df is that they contain counties that do not exist. Each one is named “Statewide Unallocated”, and both DataFrames contain one of these for each state.
# Remove these unneeded records from cases_df and deaths_df
# How many rows remain in each DataFrame?
cases_df = cases_df[cases_df['County Name'] != 'Statewide Unallocated']
death_df = death_df[death_df['County Name'] != 'Statewide Unallocated']
print(f'Cases: {len(cases_df)} rows remain.')
print(f'Deaths: {len(death_df)} rows remain.')

us_state_to_abbrev = {
    "Alabama": "AL",
    "Alaska": "AK",
    "Arizona": "AZ",
    "Arkansas": "AR",
    "California": "CA",
    "Colorado": "CO",
    "Connecticut": "CT",
    "Delaware": "DE",
    "Florida": "FL",
    "Georgia": "GA",
    "Hawaii": "HI",
    "Idaho": "ID",
    "Illinois": "IL",
    "Indiana": "IN",
    "Iowa": "IA",
    "Kansas": "KS",
    "Kentucky": "KY",
    "Louisiana": "LA",
    "Maine": "ME",
    "Maryland": "MD",
    "Massachusetts": "MA",
    "Michigan": "MI",
    "Minnesota": "MN",
    "Mississippi": "MS",
    "Missouri": "MO",
    "Montana": "MT",
    "Nebraska": "NE",
    "Nevada": "NV",
    "New Hampshire": "NH",
    "New Jersey": "NJ",
    "New Mexico": "NM",
    "New York": "NY",
    "North Carolina": "NC",
    "North Dakota": "ND",
    "Ohio": "OH",
    "Oklahoma": "OK",
    "Oregon": "OR",
    "Pennsylvania": "PA",
    "Rhode Island": "RI",
    "South Carolina": "SC",
    "South Dakota": "SD",
    "Tennessee": "TN",
    "Texas": "TX",
    "Utah": "UT",
    "Vermont": "VT",
    "Virginia": "VA",
    "Washington": "WA",
    "West Virginia": "WV",
    "Wisconsin": "WI",
    "Wyoming": "WY",
    "District of Columbia": "DC",
    "American Samoa": "AS",
    "Guam": "GU",
    "Northern Mariana Islands": "MP",
    "Puerto Rico": "PR",
    "United States Minor Outlying Islands": "UM",
    "Virgin Islands, U.S.": "VI",
}

# invert the dictionary
abbrev_to_us_state = dict(map(reversed, us_state_to_abbrev.items()))

# All three DataFrames need to agree on how to name counties and states.
# The county names already seem to be in agreement, but the state names are not. cases_df and deaths_df use state abbreviations whereas census_df uses full state names.
# Modify cases_df and deaths_df so that they each use full state names as well. Use this public domain code to help with this step: us_state_abbrev.py
# Show the first few rows of cases_df (show the output of cases_df.head())
cases_df['State'] = cases_df['State'].map(abbrev_to_us_state)
death_df['State'] = death_df['State'].map(abbrev_to_us_state)
cases_df.head()
# death_df.head()

# Joining these three data sets will only work if they have matching key columns, i.e.,
# columns that have unique, non-null values that can also be used as foreign key references across each pairwise combination of DataFrames.
# None of the current columns is unique, so you need to make matching key columns in all three DataFrames.
# Create a column named “key” that is a simple string concatenation of the County and State columns.
cases_df['key'] = cases_df['County Name'] + ', ' + cases_df['State']
death_df['key'] = death_df['County Name'] + ', ' + death_df['State']
census_df['key'] = census_df['County'] + ', ' + census_df['State']
# Use DataFrame.set_index() to set “key” as the index of each DataFrame.
cases_df = cases_df.set_index('key')
death_df = death_df.set_index('key')
census_df = census_df.set_index('key')
# Show the first few rows of census_df (show the output of census_df.head())

# Both cases_df and deaths_df have a column named 2023-07-23. In cases_df this column indicates the final cumulative count of confirmed COVID cases for each county, and in deaths_df this column indicates the final cumulative count of COVID deaths.
# Change this confusing column name to Cases in cases_df and Deaths in deaths_df
cases_df = cases_df.rename(columns={'2023-07-23': 'Cases'})
death_df = death_df.rename(columns={'2023-07-23': 'Deaths'})
# Show the resulting list of column headers for both cases_df and deaths_dft (e.g., show the output of cases_df.columns.values.tolist())
print(f'Cases: {cases_df.columns.values.tolist()}')
print(f'Deaths: {death_df.columns.values.tolist()}')

# Next, integrate the three DataFrames with two calls to DataFrame.join() . We will refer to the new, joined DataFrame as join_df.
# join_df = cases_df.join(death_df, how='outer')
cases_df = cases_df.drop(columns=['County Name', 'State'])
death_df = death_df.drop(columns=['County Name', 'State'])
census_df = census_df.drop(columns=['County', 'State'])
# Show the first few rows of join_df (show the output of join_df.head())
# How many rows does join_df contain?
join_df = cases_df.join(death_df, how='inner')
join_df = join_df.join(census_df, how='inner')
# Add two new columns to join_df called CasesPerCap and DeathsPerCap which represent the number of Cases and Deaths (respectively) in each county divided by the population (TotalPop) of the county.
join_df['CasesPerCap'] = join_df['Cases'] / join_df['TotalPop']
join_df['DeathsPerCap'] = join_df['Deaths'] / join_df['TotalPop']
# Show the first few rows of join_df
# How many rows does join_df contain?
join_df.head()
print(len(join_df))

# Construct a correlation matrix among the numeric columns of join_df using DataFrame.corr(). This will show strength of correlation (either positive or negative) between every pair of variables. Show your correlation matrix below:
correlation_matrix = join_df.corr()
import seaborn as sns
import matplotlib.pyplot as plt

sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)

plt.title('Correlation Matrix Heatmap')
plt.show()